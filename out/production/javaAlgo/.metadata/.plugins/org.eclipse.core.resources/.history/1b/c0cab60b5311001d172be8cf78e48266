package 사탕상자;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	static int N, S;
	static int MAX_CANDY_FLAVOR = 1000000;
	static int[] tree;

	public static void main(String[] args) throws Exception {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		S = 1;
		while (S < MAX_CANDY_FLAVOR) {
			S *= 2;
		}
		tree = new int[S * 2 + 1];

		N = Integer.parseInt(br.readLine());

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());

			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());

			if (a == 1) {
				System.out.println(query(1, b, b));
			} else if (a == 2) {
				int c = Integer.parseInt(st.nextToken());
				update(S + b - 1, c);
			}
		}

	}

	static int query(int node, int currRank, int targetRank) {
		
		int answerNode = node;
		
		if (currRank == 0) return node; 

		int leftChild = node * 2;
		int rightChild = node * 2 + 1;
		
		if (tree[leftChild] >= currRank) {
			answerNode = query(leftChild, currRank, targetRank);
		} else if (tree[rightChild] >= currRank - tree[leftChild]) {
			answerNode = query(rightChild, currRank - tree[leftChild], targetRank);
		}
		
		return answerNode;
	}

	static void update(int node, int count) {
		if (node == 0) return;
		tree[node] += count;
		update(node / 2, count);
		
	}

}
