package 도로네트워크_3176;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int N, K;
	static int A, B, W;
	static int MAX_N = 100000;
	static int MAX_K = 100000;
	static List<Route> adj[];
	static int[][] parentLCA;
	static int[][] dist;
	static int[] depth;
	static int[] parentD;
	static boolean[] visited;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		parentLCA = new int[18][MAX_N + 1];
		dist = new int[2][MAX_N + 1];
		depth = new int[MAX_N + 1];
		parentD = new int[MAX_N + 1];
		adj = new ArrayList[MAX_N + 1];
		visited = new boolean[MAX_N + 1];
		for (int i = 1; i <= MAX_N; i++) {
			parentLCA[0][i] = i;
			adj[i] = new ArrayList<>();
		}
		
		
		N = Integer.parseInt(br.readLine());
		for (int i = 0; i < N - 1; i++) {
			st = new StringTokenizer(br.readLine());
			A = Integer.parseInt(st.nextToken());
			B = Integer.parseInt(st.nextToken());
			W = Integer.parseInt(st.nextToken());	
			
			adj[A].add(new Route(B, W));
			adj[B].add(new Route(A, W));
		}
		
		init();
		makeParent();
		
		for (int i = 1; i <= N; i++) {
			System.out.print(depth[i] + " ");
		}
		System.out.println();
		
		for (int i = 0; i < 18; i++) {
			for (int j = 1; j <= N; j++) {
				System.out.print(parentLCA[i][j] + " ");
			}
			System.out.println();
		}
		
		
		
		
	}
	
	static void makeParent() {
		for (int i = 17; i > 0; i--) {
			for (int j = 1; j <= N; j++) {
				parentLCA[i][j] = parentLCA[i - 1][parentLCA[i - 1][j]];
			}
		}
	}
	
	static void init() {
		Arrays.fill(visited, false);
		
		Queue<Integer> queue = new LinkedList<>();
		queue.add(1);
		
		while (!queue.isEmpty()) {
			int curr = queue.poll();
			if (visited[curr]) continue;
			visited[curr] = true;
			
			for (Route next : adj[curr]) {
				depth[next.b] = depth[curr] + 1;
				parentLCA[0][next.b] = curr;
				queue.add(next.b);
			}
		}
	}
	
	static void initLCA(int A, int B, int W) {
		
		
	}
	
}

class Route {
	int b, w;
	
	public Route(int b, int w) {
		this.b = b;
		this.w = w;
	}
}